'use strict';

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Promise = require('promise');
var docblock = require('./DependencyGraph/docblock');
var isAbsolutePath = require('absolute-path');
var path = require('path');

var Module = (function () {
  function Module(file, fastfs, moduleCache) {
    _classCallCheck(this, Module);

    if (!isAbsolutePath(file)) {
      throw new Error('Expected file to be absolute path but got ' + file);
    }

    this.path = path.resolve(file);
    this.type = 'Module';

    this._fastfs = fastfs;
    this._moduleCache = moduleCache;
  }

  _createClass(Module, [{
    key: 'isHaste',
    value: function isHaste() {
      return this._read().then(function (data) {
        return !!data.id;
      });
    }
  }, {
    key: 'getName',
    value: function getName() {
      var _this = this;

      return this._read().then(function (data) {
        if (data.id) {
          return data.id;
        }

        var p = _this.getPackage();

        if (!p) {
          // Name is full path
          return _this.path;
        }

        return p.getName().then(function (name) {
          if (!name) {
            return _this.path;
          }

          return path.join(name, path.relative(p.root, _this.path));
        });
      });
    }
  }, {
    key: 'getPackage',
    value: function getPackage() {
      return this._moduleCache.getPackageForModule(this);
    }
  }, {
    key: 'getDependencies',
    value: function getDependencies() {
      return this._read().then(function (data) {
        return data.dependencies;
      });
    }
  }, {
    key: '_read',
    value: function _read() {
      if (!this._reading) {
        this._reading = this._fastfs.readFile(this.path).then(function (content) {
          var data = {};
          var moduleDocBlock = docblock.parseAsObject(content);
          if (moduleDocBlock.providesModule || moduleDocBlock.provides) {
            data.id = /^(\S*)/.exec(moduleDocBlock.providesModule || moduleDocBlock.provides)[1];
          }

          return data;
        });
      }

      return this._reading;
    }
  }, {
    key: 'getPlainObject',
    value: function getPlainObject() {
      var _this2 = this;

      return Promise.all([this.getName(), this.getDependencies()]).then(function (_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var name = _ref2[0];
        var dependencies = _ref2[1];
        return _this2.addReference({
          path: _this2.path,
          isJSON: path.extname(_this2.path) === '.json',
          resolution: undefined,
          id: name,
          dependencies: dependencies
        });
      });
    }
  }, {
    key: 'hash',
    value: function hash() {
      return 'Module : ' + this.path;
    }
  }, {
    key: 'addReference',
    value: function addReference(obj) {
      Object.defineProperty(obj, '_ref', { value: this });
      return obj;
    }
  }]);

  return Module;
})();

module.exports = Module;