'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Package = require('./Package');
var Module = require('./Module');
var path = require('path');

var ModuleCache = (function () {
  function ModuleCache(fastfs) {
    _classCallCheck(this, ModuleCache);

    this._moduleCache = Object.create(null);
    this._packageCache = Object.create(null);
    this._fastfs = fastfs;
    fastfs.on('change', this._processFileChange.bind(this));
  }

  _createClass(ModuleCache, [{
    key: 'getModule',
    value: function getModule(filePath) {
      filePath = path.resolve(filePath);
      if (!this._moduleCache[filePath]) {
        this._moduleCache[filePath] = new Module(filePath, this._fastfs, this);
      }
      return this._moduleCache[filePath];
    }
  }, {
    key: 'getPackage',
    value: function getPackage(filePath) {
      filePath = path.resolve(filePath);
      if (!this._packageCache[filePath]) {
        this._packageCache[filePath] = new Package(filePath, this._fastfs);
      }
      return this._packageCache[filePath];
    }
  }, {
    key: 'getPackageForModule',
    value: function getPackageForModule(module) {
      // TODO(amasad): use ES6 Map.
      if (module.__package) {
        if (this._packageCache[module.__package]) {
          return this._packageCache[module.__package];
        } else {
          delete module.__package;
        }
      }

      var packagePath = this._fastfs.closest(module.path, 'package.json');

      if (!packagePath) {
        return null;
      }

      module.__package = packagePath;
      return this.getPackage(packagePath);
    }
  }, {
    key: '_processFileChange',
    value: function _processFileChange(type, filePath, root) {
      var absPath = path.join(root, filePath);
      delete this._moduleCache[absPath];
      delete this._packageCache[absPath];
    }
  }]);

  return ModuleCache;
})();

module.exports = ModuleCache;