'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var isAbsolutePath = require('absolute-path');
var path = require('path');

var Package = (function () {
  function Package(file, fastfs) {
    _classCallCheck(this, Package);

    this.path = path.resolve(file);
    this.root = path.dirname(this.path);
    this._fastfs = fastfs;
    this.type = 'Package';
  }

  _createClass(Package, [{
    key: 'getMain',
    value: function getMain() {
      var _this = this;

      return this._read().then(function (json) {
        if (typeof json.browser === 'string') {
          return path.join(_this.root, json.browser);
        }

        var main = json.main || 'index';

        if (json.browser && typeof json.browser === 'object') {
          main = json.browser[main] || json.browser[main + '.js'] || json.browser[main + '.json'] || json.browser[main.replace(/(\.js|\.json)$/, '')] || main;
        }

        return path.join(_this.root, main);
      });
    }
  }, {
    key: 'isHaste',
    value: function isHaste() {
      return this._read().then(function (json) {
        return !!json.name;
      });
    }
  }, {
    key: 'getName',
    value: function getName() {
      return this._read().then(function (json) {
        return json.name;
      });
    }
  }, {
    key: 'redirectRequire',
    value: function redirectRequire(name) {
      var _this2 = this;

      return this._read().then(function (json) {
        var browser = json.browser;

        if (!browser || typeof browser !== 'object') {
          return name;
        }

        if (name[0] !== '/') {
          return browser[name] || name;
        }

        if (!isAbsolutePath(name)) {
          throw new Error('Expected ' + name + ' to be absolute path');
        }

        var relPath = './' + path.relative(_this2.root, name);
        var redirect = browser[relPath] || browser[relPath + '.js'] || browser[relPath + '.json'];
        if (redirect) {
          return path.join(_this2.root, redirect);
        }

        return name;
      });
    }
  }, {
    key: '_read',
    value: function _read() {
      if (!this._reading) {
        this._reading = this._fastfs.readFile(this.path).then(function (jsonStr) {
          return JSON.parse(jsonStr);
        });
      }

      return this._reading;
    }
  }]);

  return Package;
})();

module.exports = Package;