'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Promise = require('promise');

var _require = require('events');

var EventEmitter = _require.EventEmitter;

var _ = require('underscore');
var fs = require('fs');
var path = require('path');

var readFile = Promise.denodeify(fs.readFile);
var _stat = Promise.denodeify(fs.stat);

var hasOwn = Object.prototype.hasOwnProperty;

var Fastfs = (function (_EventEmitter) {
  _inherits(Fastfs, _EventEmitter);

  function Fastfs(roots, _ref) {
    var ignore = _ref.ignore;
    var crawling = _ref.crawling;

    _classCallCheck(this, Fastfs);

    _get(Object.getPrototypeOf(Fastfs.prototype), 'constructor', this).call(this);
    this._ignore = ignore;
    this._roots = roots.map(function (root) {
      return new File(root, { isDir: true });
    });
    this._fastPaths = Object.create(null);
    this._crawling = crawling;
  }

  _createClass(Fastfs, [{
    key: 'build',
    value: function build() {
      var _this = this;

      var rootsPattern = new RegExp('^(' + this._roots.map(function (root) {
        return escapeRegExp(root.path);
      }).join('|') + ')');

      return this._crawling.then(function (files) {
        files.forEach(function (filePath) {
          if (filePath.match(rootsPattern)) {
            var newFile = new File(filePath, { isDir: false });
            var _parent = _this._fastPaths[path.dirname(filePath)];
            if (_parent) {
              _parent.addChild(newFile);
            } else {
              _this._add(newFile);
              for (var file = newFile; file; file = file.parent) {
                if (!_this._fastPaths[file.path]) {
                  _this._fastPaths[file.path] = file;
                }
              }
            }
          }
        });
        // this._fileWatcher.on('all', this._processFileChange.bind(this));
      });
    }
  }, {
    key: 'stat',
    value: function stat(filePath) {
      var _this2 = this;

      return Promise.resolve().then(function () {
        var file = _this2._getFile(filePath);
        return file.stat();
      });
    }
  }, {
    key: 'getAllFiles',
    value: function getAllFiles() {
      return _.chain(this._roots).map(function (root) {
        return root.getFiles();
      }).flatten().value();
    }
  }, {
    key: 'findFilesByExt',
    value: function findFilesByExt(ext, _ref2) {
      var ignore = _ref2.ignore;

      return this.getAllFiles().filter(function (file) {
        return file.ext() === ext && (!ignore || !ignore(file.path));
      }).map(function (file) {
        return file.path;
      });
    }
  }, {
    key: 'findFilesByExts',
    value: function findFilesByExts(exts) {
      return this.getAllFiles().filter(function (file) {
        return exts.indexOf(file.ext()) !== -1;
      }).map(function (file) {
        return file.path;
      });
    }
  }, {
    key: 'findFilesByName',
    value: function findFilesByName(name, _ref3) {
      var ignore = _ref3.ignore;

      return this.getAllFiles().filter(function (file) {
        return path.basename(file.path) === name && (!ignore || !ignore(file.path));
      }).map(function (file) {
        return file.path;
      });
    }
  }, {
    key: 'readFile',
    value: function readFile(filePath) {
      return this._getFile(filePath).read();
    }
  }, {
    key: 'closest',
    value: function closest(filePath, name) {
      for (var file = this._getFile(filePath).parent; file; file = file.parent) {
        if (file.children[name]) {
          return file.children[name].path;
        }
      }
      return null;
    }
  }, {
    key: 'fileExists',
    value: function fileExists(filePath) {
      var file = this._getFile(filePath);
      return file && !file.isDir;
    }
  }, {
    key: 'dirExists',
    value: function dirExists(filePath) {
      var file = this._getFile(filePath);
      return file && file.isDir;
    }
  }, {
    key: 'matches',
    value: function matches(dir, pattern) {
      var dirFile = this._getFile(dir);
      if (!dirFile.isDir) {
        throw new Error('Expected file ' + dirFile.path + ' to be a directory');
      }

      return Object.keys(dirFile.children).filter(function (name) {
        return name.match(pattern);
      }).map(function (name) {
        return path.join(dirFile.path, name);
      });
    }
  }, {
    key: '_getRoot',
    value: function _getRoot(filePath) {
      for (var i = 0; i < this._roots.length; i++) {
        var possibleRoot = this._roots[i];
        if (isDescendant(possibleRoot.path, filePath)) {
          return possibleRoot;
        }
      }
      return null;
    }
  }, {
    key: '_getAndAssertRoot',
    value: function _getAndAssertRoot(filePath) {
      var root = this._getRoot(filePath);
      if (!root) {
        throw new Error('File ' + filePath + ' not found in any of the roots');
      }
      return root;
    }
  }, {
    key: '_getFile',
    value: function _getFile(filePath) {
      filePath = path.normalize(filePath);
      if (!hasOwn.call(this._fastPaths, filePath)) {
        this._fastPaths[filePath] = this._getAndAssertRoot(filePath).getFileFromPath(filePath);
      }

      return this._fastPaths[filePath];
    }
  }, {
    key: '_add',
    value: function _add(file) {
      this._getAndAssertRoot(file.path).addChild(file);
    }
  }, {
    key: '_processFileChange',
    value: function _processFileChange(type, filePath, root, fstat) {
      var absPath = path.join(root, filePath);
      if (this._ignore(absPath) || fstat && fstat.isDirectory()) {
        return;
      }

      // Make sure this event belongs to one of our roots.
      if (!this._getRoot(absPath)) {
        return;
      }

      if (type === 'delete' || type === 'change') {
        var file = this._getFile(absPath);
        if (file) {
          file.remove();
        }
      }

      delete this._fastPaths[path.normalize(absPath)];

      if (type !== 'delete') {
        this._add(new File(absPath, { isDir: false }));
      }

      this.emit('change', type, filePath, root, fstat);
    }
  }]);

  return Fastfs;
})(EventEmitter);

var File = (function () {
  function File(filePath, _ref4) {
    var isDir = _ref4.isDir;

    _classCallCheck(this, File);

    this.path = filePath;
    this.isDir = Boolean(isDir);
    if (this.isDir) {
      this.children = Object.create(null);
    }
  }

  _createClass(File, [{
    key: 'read',
    value: function read() {
      if (!this._read) {
        this._read = readFile(this.path, 'utf8');
      }
      return this._read;
    }
  }, {
    key: 'stat',
    value: function stat() {
      if (!this._stat) {
        this._stat = _stat(this.path);
      }

      return this._stat;
    }
  }, {
    key: 'addChild',
    value: function addChild(file) {
      var parts = path.relative(this.path, file.path).split(path.sep);

      if (parts.length === 0) {
        return;
      }

      if (parts.length === 1) {
        this.children[parts[0]] = file;
        file.parent = this;
      } else if (this.children[parts[0]]) {
        this.children[parts[0]].addChild(file);
      } else {
        var dir = new File(path.join(this.path, parts[0]), { isDir: true });
        dir.parent = this;
        this.children[parts[0]] = dir;
        dir.addChild(file);
      }
    }
  }, {
    key: 'getFileFromPath',
    value: function getFileFromPath(filePath) {
      var parts = path.relative(this.path, filePath).split(path.sep);

      /*eslint consistent-this:0*/
      var file = this;
      for (var i = 0; i < parts.length; i++) {
        var fileName = parts[i];
        if (!fileName) {
          continue;
        }

        if (!file || !file.isDir) {
          // File not found.
          return null;
        }

        file = file.children[fileName];
      }

      return file;
    }
  }, {
    key: 'getFiles',
    value: function getFiles() {
      return _.flatten(_.values(this.children).map(function (file) {
        if (file.isDir) {
          return file.getFiles();
        } else {
          return file;
        }
      }));
    }
  }, {
    key: 'ext',
    value: function ext() {
      return path.extname(this.path).replace(/^\./, '');
    }
  }, {
    key: 'remove',
    value: function remove() {
      if (!this.parent) {
        throw new Error('No parent to delete ' + this.path + ' from');
      }

      delete this.parent.children[path.basename(this.path)];
    }
  }]);

  return File;
})();

function isDescendant(root, child) {
  return path.relative(root, child).indexOf('..') !== 0;
}

function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
}

module.exports = Fastfs;